package ecellapp.sam10795.com.startuppo;import android.app.Dialog;import android.content.Intent;import android.content.SharedPreferences;import android.net.Uri;import android.os.Bundle;import android.support.v7.app.AppCompatActivity;import android.util.Log;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.widget.ImageView;import android.widget.TextView;import android.widget.Toast;import ecellapp.sam10795.com.startuppo.R;import java.text.DateFormat;import java.text.ParseException;import java.util.ArrayList;import java.util.Date;import java.util.LinkedHashSet;import java.util.Set;public class Profile extends AppCompatActivity {    TextView pkcaught,pktr,pkleg,batrec,boxlim,pkbal,gbal,ubal,mbal,time,totscr;    ImageView propic;    SharedPreferences sp;    SharedPreferences.Editor ed;    SUPDataSource supDataSource;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_profile);        SharedPreferences sharedPreferences = getSharedPreferences("PKDT", MODE_PRIVATE);        DateFormat df = DateFormat.getDateTimeInstance();        propic = (ImageView)findViewById(R.id.pro_pic);        pkbal = (TextView)findViewById(R.id.pk);        gbal = (TextView)findViewById(R.id.gb);        ubal = (TextView)findViewById(R.id.ub);        mbal = (TextView)findViewById(R.id.mb);        time = (TextView)findViewById(R.id.time_spent);        pkcaught = (TextView)findViewById(R.id.pkmnno);        pktr = (TextView)findViewById(R.id.pktrno);        pkleg = (TextView)findViewById(R.id.legend_owned);        batrec = (TextView)findViewById(R.id.bat_rec);        boxlim = (TextView)findViewById(R.id.boxlim);        totscr = (TextView)findViewById(R.id.total_score);        propic.setImageResource(R.drawable.ecell);        try {            long durn = new Date().getTime()-df.parse(sharedPreferences.getString("Start","")).getTime();            time.setText(String.valueOf(durn/3600000)+" hours");        } catch (ParseException e) {            e.printStackTrace();        }        //beginUserInitiatedSignIn();        //setPropic();        int pbc = sharedPreferences.getInt("PBall",0);        int gbc = sharedPreferences.getInt("GBall",0);        int ubc = sharedPreferences.getInt("UBall",0);        int mbc = sharedPreferences.getInt("MBall",0);        pkbal.setText(pbc+"x");        gbal.setText(gbc+"x");        ubal.setText(ubc+"x");        mbal.setText(mbc+"x");        /*propic.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Intent intent = new Intent();                intent.setType("image*//*");                intent.setAction(Intent.ACTION_GET_CONTENT);                startActivityForResult(Intent.createChooser(intent, "Select Picture"), 1);            }        });*/        supDataSource = new SUPDataSource(this);        supDataSource.open();        ArrayList<SUP> sups = supDataSource.getAllSUP();        supDataSource.close();        int legendcount=0,tradecount=0,pkcount;        Set<String> strings  = new LinkedHashSet<>();        int lvtot = 0;        for(SUP p:sups)        {            strings.add(p.getName());            lvtot+=p.getLv();            if(p.isLegend())            {                legendcount++;            }            if(p.isTraded())            {                tradecount++;            }        }        pkcount = strings.size();        pkcaught.setText(pkcount+"");        pktr.setText(tradecount+"");        pkleg.setText(legendcount+"");        int win = sharedPreferences.getInt("Win",0);        int score = 250*legendcount+5*tradecount+20*pkcount+lvtot+150*win + 100;//TODO: 100*legendcount+5*tradecount+10*pkcount+lvtot+50*win + 100;        sharedPreferences.edit().putInt("Score",score).apply();        batrec.setText("Wins: "+win);        totscr.setText(score+"");        final int boxl = sharedPreferences.getInt("BOX_LIMIT",51);        if(tradecount>=(boxl/2))        {            sharedPreferences.edit().putInt("BOX_LIMIT",2*boxl).apply();        }        boxlim.setText((boxl-1)+"");        boxlim.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Toast.makeText(Profile.this,"To increase box limit, you must trade at least"+ boxl/2 +" Startups",Toast.LENGTH_SHORT).show();            }        });            /*if(legendcount>=1)            {                Games.Achievements.unlock(getApiClient(),getString(R.string.achievement_acquired_1_legendary_pokemon));            }            if(legendcount>=5)            {                Games.Achievements.unlock(getApiClient(),getString(R.string.achievement_acquired_5_legendary_pokemon));            }            if(legendcount>=10)            {                Games.Achievements.unlock(getApiClient(),getString(R.string.achievement_acquired_10_legendary_pokemon));            }            if(tradecount>=1)            {                Games.Achievements.unlock(getApiClient(),getString(R.string.achievement_traded_1_pokemon));            }            if(tradecount>=5)            {                Games.Achievements.unlock(getApiClient(),getString(R.string.achievement_traded_5_pokemon));            }            if(tradecount>=10)            {                Games.Achievements.unlock(getApiClient(),getString(R.string.achievement_traded_10_pokemon));            }            if(tradecount>=25)            {                Games.Achievements.unlock(getApiClient(),getString(R.string.achievement_traded_25_pokemon));            }            if(tradecount>=50)            {                Games.Achievements.unlock(getApiClient(),getString(R.string.achievement_traded_50_pokemon));            }            if(pkcount>=10)            {                Games.Achievements.unlock(getApiClient(),getString(R.string.achievement_caught_10_pokemon));            }            if(pkcount>=25)            {                Games.Achievements.unlock(getApiClient(),getString(R.string.achievement_caught_25_pokemon));            }            if(pkcount>=50)            {                Games.Achievements.unlock(getApiClient(),getString(R.string.achievement_caught_50_pokemon));            }            if(pkcount>=100)            {                Games.Achievements.unlock(getApiClient(),getString(R.string.achievement_caught_100_pokemon));            }            if(evcount>=5)            {                Games.Achievements.unlock(getApiClient(),getString(R.string.achievement_evolved_5_pokemon));            }            if(evcount>=10)            {                Games.Achievements.unlock(getApiClient(),getString(R.string.achievement_evolved_10_pokemon));            }            if(evcount>=25)            {                Games.Achievements.unlock(getApiClient(),getString(R.string.achievement_evolved_25_pokemon));            }            if(evcount>=50)            {                Games.Achievements.unlock(getApiClient(),getString(R.string.achievement_evolved_50_pokemon));            }            if(evcount>=100)            {                Games.Achievements.unlock(getApiClient(),getString(R.string.achievement_evolved_100_pokemon));            }            if(lvcount>=15)            {                Games.Achievements.unlock(getApiClient(),getString(R.string.achievement_achieved_level_15));            }            if(lvcount>=25)            {                Games.Achievements.unlock(getApiClient(),getString(R.string.achievement_achieved_level_25));            }            if(lvcount>=50)            {                Games.Achievements.unlock(getApiClient(),getString(R.string.achievement_achieved_level_50));            }            if(lvcount>=75)            {                Games.Achievements.unlock(getApiClient(),getString(R.string.achievement_achieved_level_75));            }            if(lvcount>=100)            {                Games.Achievements.unlock(getApiClient(),getString(R.string.achievement_achieved_level_100));            }            Games.Leaderboards.submitScore(getApiClient(),getString(R.string.leaderboard_legendary_trainers),legendcount);            Games.Leaderboards.submitScore(getApiClient(),getString(R.string.leaderboard_leading_collectors),pkcount);            Games.Leaderboards.submitScore(getApiClient(),getString(R.string.leaderboard_leading_evolvers),evcount);            Games.Leaderboards.submitScore(getApiClient(),getString(R.string.leaderboard_leading_traders),tradecount);            Games.Leaderboards.submitScore(getApiClient(),getString(R.string.leaderboard_leading_trainers),lvtot+50*legendcount);*/    }    @Override    public boolean onCreateOptionsMenu(Menu menu) {        // Inflate the menu; this adds items to the action bar if it is present.        getMenuInflater().inflate(R.menu.menu_profile, menu);        return true;    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        // Handle action bar item clicks here. The action bar will        // automatically handle clicks on the Home/Up button, so long        // as you specify a parent activity in AndroidManifest.xml.        int id = item.getItemId();        //noinspection SimplifiableIfStatement        if (id == R.id.action_about) {            Dialog dialog = new Dialog(this);            dialog.setContentView(R.layout.about_credits);            dialog.setTitle("About");            dialog.show();        }        if(id == R.id.action_howto)        {Dialog dialog = new Dialog(this);            dialog.setContentView(R.layout.howto);            dialog.setTitle("Instructions");            dialog.show();        }        return super.onOptionsItemSelected(item);    }    @Override    protected void onActivityResult(int requestCode, int resultCode, Intent data) {        super.onActivityResult(requestCode, resultCode, data);        if (requestCode == 1) {            if (resultCode == RESULT_OK&&data!=null) {                ed = sp.edit();                Uri uri = data.getData();                ed.putString("URI",uri.toString());                ed.apply();                propic.setImageURI(uri);            }        }    }   /* @Override    public void onSignInFailed() {    }    @Override    public void onSignInSucceeded() {    }*/    public void setPropic()    {        sp = getSharedPreferences("BMP",MODE_PRIVATE);        try        {            Uri uri = Uri.parse(sp.getString("URI",""));            if(uri!=null) {                propic.setImageURI(uri);            }            else            {                propic.setImageResource(R.drawable.pik);            }        }        catch(Exception e)        {            Log.d("Service","NoImg");            propic.setImageResource(R.drawable.pik);        }    }}