package ecellapp.sam10795.com.startuppo;import android.app.AlarmManager;import android.app.PendingIntent;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.SharedPreferences;import android.content.pm.PackageManager;import android.content.res.AssetFileDescriptor;import android.content.res.AssetManager;import android.os.Build;import android.os.Environment;import android.os.Handler;import android.os.Bundle;import android.support.annotation.NonNull;import android.support.v7.app.AlertDialog;import android.support.v7.app.AppCompatActivity;import android.util.Log;import android.view.View;import android.view.animation.Animation;import android.view.animation.AnimationUtils;import android.widget.AdapterView;import android.widget.Button;import android.widget.EditText;import android.widget.GridView;import android.widget.LinearLayout;import android.widget.RadioGroup;import android.widget.Spinner;import android.widget.Toast;import android.widget.ViewFlipper;import com.google.firebase.database.DatabaseReference;import com.google.firebase.database.FirebaseDatabase;import com.opencsv.CSVReader;import ecellapp.sam10795.com.startuppo.R;import java.io.BufferedReader;import java.io.File;import java.io.FileDescriptor;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.FileReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.OutputStream;import java.nio.channels.FileChannel;import java.text.DateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.Date;import java.util.List;import java.util.StringTokenizer;import java.util.regex.Matcher;import java.util.regex.Pattern;public class Flaunch extends AppCompatActivity {    String BALL_NAME = "BALL NAME";    ViewFlipper flipper;    Button next,play,next_start;    EditText roll_no,fullname;    Spinner spinner;    GridView gridView;    ArrayList<SUP> sups = new ArrayList<>();    DatabaseReference userdata;    List<String[]> records;    AssetManager am;    InputStream is;    Utilities utilities;    File file;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_flaunch);        SharedPreferences sharedPreferences = getSharedPreferences("PKDT",MODE_PRIVATE);        final SharedPreferences.Editor editor = sharedPreferences.edit();        userdata = FirebaseDatabase.getInstance().getReference(getResources().getString(R.string.Users));        flipper = (ViewFlipper)findViewById(R.id.flipper);        next = (Button)findViewById(R.id.next);        play = (Button)findViewById(R.id.play);        next_start = (Button)findViewById(R.id.button2);        gridView = (GridView)findViewById(R.id.gridView);        roll_no = (EditText)findViewById(R.id.rollNo);        spinner = (Spinner)findViewById(R.id.spinner);        fullname = (EditText)findViewById(R.id.fullname);        utilities = new Utilities();        am = getAssets();        is = null;        try {            is = am.open("iitm.map");            Log.i("Open","map");            // Create new file to copy into.            file = new File(Environment.getExternalStorageDirectory()+java.io.File.separator+"iitm.map");            if(Build.VERSION.SDK_INT>Build.VERSION_CODES.LOLLIPOP_MR1)                {                    String perms[] = {"android.permission.WRITE_EXTERNAL_STORAGE"};                    requestPermissions(perms,200);                }            else {                    boolean b = file.createNewFile();                    copyToFile(is, file);                    Log.i("File", "Filed " + b);            }        } catch (IOException e) {            e.printStackTrace();        }        boolean first = sharedPreferences.getBoolean("First_Launch",true);        if(!first)        {            Intent intent = new Intent(Flaunch.this,Mainu.class);            startActivity(intent);            finish();        }        DateFormat df = DateFormat.getDateTimeInstance();        editor.putString("Start",df.format(new Date()));        editor.putLong("LastPDate",new Date().getTime());        editor.putLong("LastGDate",new Date().getTime());        editor.putLong("LastUDate",new Date().getTime());        editor.putLong("LastMDate",new Date().getTime());        editor.putInt("PBall",50);//TODO:25);        editor.putInt("GBall",35);//TODO:10);        editor.putInt("UBall",5);        editor.putInt("MBall",1);        SharedPreferences sharps = getSharedPreferences("Stops",MODE_PRIVATE);        sharps.edit().putLong("Guru",new Date().getTime()-600000).apply();        sharps.edit().putLong("Campus Cafe",new Date().getTime()-600000).apply();        sharps.edit().putLong("CCD",new Date().getTime()-600000).apply();        sharps.edit().putLong("Zaitoon",new Date().getTime()-600000).apply();        final Button button = (Button)findViewById(R.id.button);        button.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                button.setVisibility(View.GONE);                LinearLayout top = (LinearLayout)findViewById(R.id.top);                LinearLayout bot = (LinearLayout)findViewById(R.id.bot);                Animation up = AnimationUtils.loadAnimation(Flaunch.this,R.anim.slide_up);                top.startAnimation(up);                Animation down = AnimationUtils.loadAnimation(Flaunch.this,R.anim.slide_down);                bot.startAnimation(down);                new Handler().postDelayed(new Runnable() {                    @Override                    public void run() {                      flipper.showNext();                    }                },500);            }        });        next.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                flipper.showNext();            }        });        play.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                flipper.showNext();            }        });        next_start.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if(valid()) {                    Log.i("Hostel",spinner.getSelectedItem().toString());                    Log.i("Roll number",roll_no.getText().toString());                    editor.putString("RollNo",roll_no.getText().toString());                    editor.putString("Name",fullname.getText().toString());                    editor.putString("Hostel",spinner.getSelectedItem().toString());                    editor.putInt("Score",100);                    editor.putInt("Win",0);                    editor.apply();                    userdata.child(roll_no.getText().toString()).setValue(utilities.getUser(Flaunch.this));                    flipper.showNext();                }                else                {                    Toast.makeText(Flaunch.this,"Invalid Roll Number",Toast.LENGTH_SHORT).show();                }            }        });        String[] starters = {"Ather Energy","Detect Technologies","HyperVerge"};        for(String s:starters)        {            records = utilities.getRecords(this);            SUP sup = new SUP();            sup.setName(s);            sup.setBag(0);            sup.setZone("Start of game");            sup.setLegend(false);            sup.setLv(35);//TODO:10            sup.setTraded(false);            for(String record[] : records)            {                if(utilities.formatname(record[0]).equalsIgnoreCase(utilities.formatname(s)))                {                    sup.setName(record[0]);                    sup.setEvaluation(record[3]);                    sup.setFunding(record[6]);                    sup.setInfo(record[4]);                    sup.setFoundate(record[2]);                    sup.setFounders(record[5]);                    sup.setType(record[1]);                    sups.add(sup);                    break;                }                // Name - Type - Founding Date - Valuation - Info - Founders - Funding - Legendary            }        }        gridView.setAdapter(new SUPAdapter(this,sups));        gridView.setOnItemClickListener(new AdapterView.OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {                final SUP p = (SUP)parent.getItemAtPosition(position);                new AlertDialog.Builder(Flaunch.this)                        .setTitle("Finalize starter?")                        .setMessage("Select "+p.getName()+" as starter?")                        .setPositiveButton("Yes", new DialogInterface.OnClickListener() {                            @Override                            public void onClick(DialogInterface dialog, int which) {                                SUPDataSource pkmnDataSource = new SUPDataSource(Flaunch.this);                                pkmnDataSource.open();                                pkmnDataSource.createSUP(p);                                pkmnDataSource.close();                                editor.putBoolean("First_Launch",false);                                editor.apply();                                utilities.updatescore(Flaunch.this);                                Intent intent = new Intent(Flaunch.this,Mainu.class);                                startActivity(intent);                                finish();                            }                        })                        .setNegativeButton("No", new DialogInterface.OnClickListener() {                            @Override                            public void onClick(DialogInterface dialog, int which) {                                dialog.dismiss();                            }                        })                        .show();            }        });    }    private boolean valid()    {        String rollno = roll_no.getText().toString();        String name = fullname.getText().toString();        Pattern pattern = Pattern.compile("\\w\\w\\d\\d\\w\\d\\d\\d");        Matcher matcher = pattern.matcher(rollno);        if(matcher.matches())        {            Pattern pattern2 = Pattern.compile("^\\p{L}+[\\p{L}\\p{Z}\\p{P}]{0,}");            Matcher matcher2 = pattern2.matcher(name);            if(matcher2.matches())            {                return true;            }            else            {                fullname.setError("Invalid Name");                return false;            }        }        else        {            roll_no.setError("Invalid roll number");            return false;        }    }    @Override    public void onBackPressed() {        finish();    }    private void scheduleNotification(int delay, String ball, int id) {        Intent notificationIntent = new Intent(this, NotifReceiver.class);        notificationIntent.putExtra(NotifReceiver.NOTIFICATION_ID, id);        notificationIntent.putExtra(BALL_NAME,ball);        PendingIntent pendingIntent = PendingIntent.getBroadcast(this,id,notificationIntent,PendingIntent.FLAG_UPDATE_CURRENT);        Calendar cal = Calendar.getInstance();        AlarmManager alarmManager = (AlarmManager)getSystemService(Context.ALARM_SERVICE);        alarmManager.setRepeating(AlarmManager.RTC_WAKEUP,cal.getTimeInMillis()+delay,delay,pendingIntent);        Log.i("Notif","Scheduled");    }    public static void copyToFile(InputStream is, File dst) throws IOException {        Log.i("Output","Name:"+dst.getPath());        OutputStream out;        out = new FileOutputStream(dst);        byte[] buffer = new byte[1024];        int read;        while ((read = is.read(buffer)) != -1) {            out.write(buffer, 0, read);        }        is.close();        out.flush();        out.close();    }    @Override    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {        if(requestCode==200 && grantResults[0]== PackageManager.PERMISSION_GRANTED){            try {                Log.i("Perm","Grant");                boolean b = file.createNewFile();                copyToFile(is, file);                Log.i("File", "Filed perm " + b);            }            catch(IOException io)            {                Log.i("Error","IOError");            }        }    }}