package ecellapp.sam10795.com.startuppo;import android.annotation.TargetApi;import android.app.Activity;import android.app.AlertDialog;import android.app.Dialog;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.SharedPreferences;import android.graphics.BitmapFactory;import android.graphics.drawable.Drawable;import android.location.Location;import android.media.MediaPlayer;import android.os.Build;import android.os.Bundle;import android.os.CountDownTimer;import android.os.Environment;import android.os.Handler;import android.os.Vibrator;import android.support.v7.app.ActionBarActivity;import android.util.Log;import android.view.GestureDetector;import android.view.MotionEvent;import android.view.View;import android.widget.AdapterView;import android.widget.Button;import android.widget.GridView;import android.widget.TextView;import android.widget.Toast;import com.google.firebase.database.ChildEventListener;import com.google.firebase.database.DataSnapshot;import com.google.firebase.database.DatabaseError;import com.google.firebase.database.DatabaseReference;import com.google.firebase.database.FirebaseDatabase;import org.mapsforge.core.graphics.Bitmap;import org.mapsforge.core.model.LatLong;import org.mapsforge.core.model.Point;import org.mapsforge.map.android.graphics.AndroidGraphicFactory;import org.mapsforge.map.android.util.AndroidUtil;import org.mapsforge.map.android.view.MapView;import org.mapsforge.map.datastore.MapDataStore;import org.mapsforge.map.layer.cache.TileCache;import org.mapsforge.map.layer.overlay.Marker;import org.mapsforge.map.layer.renderer.TileRendererLayer;import org.mapsforge.map.reader.MapFile;import org.mapsforge.map.rendertheme.InternalRenderTheme;import java.io.File;import java.util.ArrayList;import java.util.Arrays;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Random;/** * Created by SAM10795 on 27-08-2015. */public class MainActivity extends Activity{    private MapView mapView;    private static MyLocationOverlay myLocationOverlay;    private DatabaseReference TowerData;    private SharedPreferences sharedPreferences;    private SharedPreferences.Editor editor;    public  static ArrayList<SUP> sups;    HashMap<String,Marker> towermap;    AlertDialog.Builder alertDialogBuilder,pkmnbuild;    String name;    int Lv, id;    static int count=0;    Vibrator vibrator;    long pattern[] = {0,300,200,300,200};    Location newlocation;    static int score;    static boolean on;    static boolean busy = false;    static Dialog dialog;    Handler handler;    Runnable runnable;    int random_delay;    MediaPlayer mediaPlayer;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        AndroidGraphicFactory.createInstance(this.getApplication());        TowerData = FirebaseDatabase.getInstance().getReference(getResources().getString(R.string.Towers));        towermap = new HashMap<>(20);        this.mapView = new MapView(this);        setContentView(this.mapView);        SUPDataSource sd = new SUPDataSource(this);        sd.open();        sups = sd.getAllSUP();        sd.close();        this.mapView.setClickable(true);        this.mapView.getMapScaleBar().setVisible(true);        this.mapView.setBuiltInZoomControls(false);        this.mapView.setZoomLevelMin((byte) 17);        this.mapView.setZoomLevelMax((byte) 20);        // create a tile cache of suitable size        TileCache tileCache = AndroidUtil.createTileCache(this, "mapcache",                mapView.getModel().displayModel.getTileSize(), 1f,                this.mapView.getModel().frameBufferModel.getOverdrawFactor());        // tile renderer layer using internal render theme        MapDataStore mapDataStore = new MapFile(new File(Environment.getExternalStorageDirectory()+java.io.File.separator+"iitm.map"));        TileRendererLayer tileRendererLayer = new TileRendererLayer(tileCache, mapDataStore,                this.mapView.getModel().mapViewPosition, AndroidGraphicFactory.INSTANCE);        tileRendererLayer.setXmlRenderTheme(InternalRenderTheme.DEFAULT);        // only once a layer is associated with a mapView the rendering starts        this.mapView.getLayerManager().getLayers().add(tileRendererLayer);        score = getSharedPreferences("PKDT", MODE_PRIVATE).getInt("Score",100);        sharedPreferences = getSharedPreferences("Location",MODE_PRIVATE);        double lat_i = Double.parseDouble(sharedPreferences.getString("Lat","12.9908"));        double lon_i = Double.parseDouble(sharedPreferences.getString("Lon","80.2339"));        this.mapView.setCenter(new LatLong(lat_i,lon_i));        this.mapView.setZoomLevel((byte) 19);        Drawable drawable = Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP ? getDrawable(R.drawable.erock) : getResources().getDrawable(R.drawable.erock);        Bitmap bitmap = AndroidGraphicFactory.convertToBitmap(drawable);        // create the overlay and tell it to follow the location        this.myLocationOverlay = new MyLocationOverlay(this,                this.mapView.getModel().mapViewPosition, bitmap);        this.myLocationOverlay.setSnapToLocationEnabled(false);        mapView.getLayerManager().getLayers().add(this.myLocationOverlay);        this.mapView.setOnLongClickListener(new View.OnLongClickListener() {            @Override            public boolean onLongClick(View v) {                myLocationOverlay.setSnapToLocationEnabled(!myLocationOverlay.isSnapToLocationEnabled());                return true;            }        });        addstops();        addTowers();        vibrator = (Vibrator) getSystemService(VIBRATOR_SERVICE);        handler = new Handler();        runnable = new Runnable() {            @Override            public void run() {                Log.i("SearchRun","Running");                if(!busy) {                    if (newlocation != null&&!MainActivity.this.isFinishing()) {                        //if (myLocationOverlay.getLastLocation().distanceTo(newlocation) > 100) {                            showPKMN();                        //}                    }                    newlocation = myLocationOverlay.getLastLocation();                    Random random = new Random();                    random_delay = random.nextInt(6) * 5000;//TODO: (2+random.nextInt(6)) * 5000;                    handler.postDelayed(runnable, random_delay);                }            }        };        newlocation = myLocationOverlay.getLastLocation();        handler.postDelayed(runnable,5000);//TODO: 10000);    }    void showPKMN()    {        vibrator.vibrate(pattern,-1);        pkmnbuild = new AlertDialog.Builder(MainActivity.this);        pkmnbuild.setTitle("Startup Found!")                .setCancelable(true)                .setMessage("Click the button to catch")                .setPositiveButton("Catch", new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                        dialog.dismiss();                        vibrator.cancel();                        scan();                    }                })                .create();        final AlertDialog alert = pkmnbuild.create();        alert.show();        Handler handler = new Handler();        handler.postDelayed(new Runnable() {            @Override            public void run() {                alert.dismiss();                vibrator.cancel();            }        },5000);    }    @SuppressWarnings("deprecation")    @TargetApi(Build.VERSION_CODES.LOLLIPOP)    static Marker createTappableMarker(final Context c, int resourceIdentifier,                                       LatLong latLong, final Tower tower) {        Drawable drawable = Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP ? c.getDrawable(resourceIdentifier) : c.getResources().getDrawable(resourceIdentifier);        Bitmap bitmap = AndroidGraphicFactory.convertToBitmap(drawable);        bitmap.incrementRefCount();        return new Marker(latLong, bitmap, 0, -bitmap.getHeight() / 2) {            @Override            public boolean onTap(LatLong geoPoint, Point viewPosition,                                 Point tapPoint) {                if (contains(viewPosition, tapPoint)) {                    busy = true;                    SharedPreferences sharedPreferences = c.getSharedPreferences("PKDT",MODE_PRIVATE);                    String username = sharedPreferences.getString("Name","");                    Location myloc = new Location("");                    myloc.setLatitude(geoPoint.getLatitude());                    myloc.setLongitude(geoPoint.getLongitude());                    if(myLocationOverlay.getLastLocation()!=null)                    {                        Log.i("Distance",""+myLocationOverlay.getLastLocation().distanceTo(myloc));                        Log.i("Location",myloc.getLatitude()+","+myloc.getLongitude());                    }                    else                    {                        Toast.makeText(c,"Please turn on your GPS",Toast.LENGTH_SHORT).show();                        busy = false;                        return false;                    }                    /*if(myLocationOverlay.getLastLocation().distanceTo(myloc)>70)                    {                        Toast.makeText(c,"You need to be within 70 metres from the tower",Toast.LENGTH_SHORT).show();                        busy=false;                        return false;                    }*///TODO:Revert                    if(!tower.getCapUser().equals(username))                    {                        dialog = new Dialog(c);                        dialog.setContentView(R.layout.dialog_battle);                        TextView oppo = (TextView)dialog.findViewById(R.id.oppo);                        GridView gridView = (GridView)dialog.findViewById(R.id.gridView);                        if(tower.getCapUser().length()>1)                        {                            oppo.setText("This tower is capture by "+tower.getCapUser()+" from "+tower.getCapHostel()+                            "\nSelect a Startup to battle their "+tower.getCapSUP());                        }                        else                        {                            oppo.setText(tower.getName()+" is uncaptured. Select a Startup to capture and guard it");                        }                        SUPAdapter sa = new SUPAdapter(c,sups);                        gridView.setAdapter(sa);                        gridView.setOnItemClickListener(new AdapterView.OnItemClickListener() {                            @Override                            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {                                SUP sup = (SUP)parent.getItemAtPosition(position);                                Intent intent = new Intent(c,LVTap.class);                                intent.putExtra("Pokemon",sup.getName());                                intent.putExtra("Level",sup.getLv());                                intent.putExtra("Battle",true);                                intent.putExtra("Opponent",tower.getCapSUP());                                intent.putExtra("OppLv",tower.getSUPLv());                                intent.putExtra("OppTow",tower.getCapHostel());                                intent.putExtra("Tower",tower.getName());                                c.startActivity(intent);                            }                        });                        dialog.setTitle("Tower Battle!");                        dialog.show();                    }                    else                    {                        Toast.makeText(c,"You have already captured "+tower.getName(),Toast.LENGTH_SHORT).show();                    }                    busy = false;                    return true;                }                busy = false;                return false;            }        };    }    @SuppressWarnings("deprecation")    @TargetApi(Build.VERSION_CODES.LOLLIPOP)    static Marker createStop(final Context c, LatLong latLong, final String name) {        int resourceIdentifier = R.drawable.bank;        Drawable drawable = Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP ? c.getDrawable(resourceIdentifier) : c.getResources().getDrawable(resourceIdentifier);        Bitmap bitmap = AndroidGraphicFactory.convertToBitmap(drawable);        bitmap.incrementRefCount();        return new Marker(latLong, bitmap, 0, -bitmap.getHeight() / 2) {            @Override            public boolean onTap(LatLong geoPoint, Point viewPosition,                                 Point tapPoint) {                if (contains(viewPosition, tapPoint)) {                    busy = true;                    Location myloc = new Location("");                    myloc.setLatitude(geoPoint.getLatitude());                    myloc.setLongitude(geoPoint.getLongitude());                    if(myLocationOverlay.getLastLocation()!=null)                    {                        Log.i("Distance",""+myLocationOverlay.getLastLocation().distanceTo(myloc));                        Log.i("Location",myloc.getLatitude()+","+myloc.getLongitude());                    }                    else                    {                        Toast.makeText(c,"Please turn on your GPS",Toast.LENGTH_SHORT).show();                        busy = false;                        return false;                    }                    if(myLocationOverlay.getLastLocation().distanceTo(myloc)>70)                    {                        Toast.makeText(c,"You need to be within 70 metres from the FundingPoint",Toast.LENGTH_SHORT).show();                        busy = false;                        return false;                    }                    final SharedPreferences sharedPreferences = c.getSharedPreferences("Stops",MODE_PRIVATE);                    if(sharedPreferences.getLong(name,0)+600000>new Date().getTime())                    {                        int mins = 10-(int)((new Date().getTime()-sharedPreferences.getLong(name,0))/600000);                        Toast.makeText(c,"You need to wait for "+mins+" minutes before re-using this FundingPoint",Toast.LENGTH_SHORT).show();                        busy = false;                        return false;                    }                    final Dialog dialog = new Dialog(c);                    dialog.setTitle("Funding Point!");                    dialog.setContentView(R.layout.dialog_pokestop);                    final TextView timer_clock = (TextView) dialog.findViewById(R.id.timer_clock);                    final TextView timecount = (TextView)dialog.findViewById(R.id.timer_count);                    Button button = (Button) dialog.findViewById(R.id.tap_button);                    on = false;                    final CountDownTimer countDownTimer = new CountDownTimer(5000,100) {                        @Override                        public void onTick(long millisUntilFinished) {                            timer_clock.setText("Timer: "+millisUntilFinished/1000.0);                            timecount.setText("Taps: "+count);                        }                        @Override                        public void onFinish() {                            timer_clock.setText("Time Up!!!");                            sharedPreferences.edit().putLong(name,new Date().getTime()).commit();                            updatecash(c,count);                            on = false;                            count = 0;                            dialog.dismiss();                        }                    };                    button.setOnClickListener(new View.OnClickListener() {                        @Override                        public void onClick(View v) {                            if(on) {                                count++;                            }                            else                            {                                countDownTimer.start();                                on = true;                            }                        }                    });                    dialog.show();                    busy = false;                    return true;                }                busy = false;                return false;            }        };    }    private void addstops()    {        Marker guru = createStop(this, new LatLong(12.986877, 80.235282), "Guru");        Marker campcaf = createStop(this, new LatLong(12.9916572,80.2308081), "Campus Cafe");        Marker zton = createStop(this, new LatLong(12.985361,80.236395), "Zaitoon");        Marker ccd = createStop(this, new LatLong(12.9913043,80.2337182), "CCD");        mapView.getLayerManager().getLayers().add(guru);        mapView.getLayerManager().getLayers().add(campcaf);        mapView.getLayerManager().getLayers().add(zton);        mapView.getLayerManager().getLayers().add(ccd);    }    private void addTowers()    {        TowerData.addChildEventListener(new ChildEventListener() {            @Override            public void onChildAdded(DataSnapshot dataSnapshot, String s) {                Tower t = dataSnapshot.getValue(Tower.class);                if(t.getName().equalsIgnoreCase(getSharedPreferences("PKDT",MODE_PRIVATE).getString("CapHostel","")))                {                    if(t.getCapUser().equalsIgnoreCase(new Utilities().getUser(MainActivity.this).getName()))                    {                        getSharedPreferences("PKDT",MODE_PRIVATE).edit().putString("CapHostel","").apply();                    }                }                int drawH;                if(t.getCapHostel().length()>2) {                    drawH = getResources().getIdentifier(t.getCapHostel().toLowerCase(), "drawable", getPackageName());                }                else                {                    drawH = getResources().getIdentifier("blank","drawable", getPackageName());                }                Marker marker = createTappableMarker(MainActivity.this,drawH,new LatLong(t.getLat(),t.getLon()),t);                towermap.put(t.getName(),marker);                mapView.getLayerManager().getLayers().add(marker);            }            @Override            public void onChildChanged(DataSnapshot dataSnapshot, String s) {                Tower t = dataSnapshot.getValue(Tower.class);                if(t.getName().equalsIgnoreCase(getSharedPreferences("PKDT",MODE_PRIVATE).getString("CapHostel","")))                {                    if(t.getCapUser().equalsIgnoreCase(new Utilities().getUser(MainActivity.this).getName()))                    {                        getSharedPreferences("PKDT",MODE_PRIVATE).edit().putString("CapHostel","").apply();                    }                }                int drawH;                if(t.getCapHostel().length()>2) {                    drawH = getResources().getIdentifier(t.getCapHostel().toLowerCase(), "drawable", getPackageName());                }                else                {                    drawH = getResources().getIdentifier("blank","drawable", getPackageName());                }                if(mapView.getLayerManager()!=null) {                    mapView.getLayerManager().getLayers().remove(towermap.get(t.getName()), false);                    Log.i("Mal", drawH + "");                    Marker marker = createTappableMarker(MainActivity.this, drawH, new LatLong(t.getLat(), t.getLon()), t);                    mapView.getLayerManager().getLayers().add(marker);                    towermap.put(t.getName(), marker);                    Log.i("Changed", t.getName() + "," + t.getCapHostel() + "," + t.getCapUser());                }            }            @Override            public void onChildRemoved(DataSnapshot dataSnapshot) {                Log.i("Removed","Child");            }            @Override            public void onChildMoved(DataSnapshot dataSnapshot, String s) {                Log.i("Moved","");            }            @Override            public void onCancelled(DatabaseError databaseError) {                Log.w("Error","Database Error");            }        });    }    @Override    protected void onStart() {        super.onStart();        mediaPlayer = MediaPlayer.create(this,R.raw.other);        mediaPlayer.start();        mediaPlayer.setLooping(true);        this.myLocationOverlay.enableMyLocation(true);        if(!this.myLocationOverlay.isMyLocationEnabled())        {            showGPSDisabledAlertToUser();        }    }    @Override    protected void onStop() {        this.myLocationOverlay.disableMyLocation();        mediaPlayer.stop();        vibrator.cancel();        if(dialog!=null)        {dialog.dismiss();}        super.onStop();    }    @Override    protected void onDestroy() {        this.mapView.destroyAll();        vibrator.cancel();        AndroidGraphicFactory.clearResourceMemoryCache();        super.onDestroy();    }    @Override    public void onBackPressed() {        Intent intent = new Intent(MainActivity.this, Mainu.class);        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);        startActivity(intent);        finish();    }    public void scan() {        Random random = new Random();        Lv = random.nextInt(10);//TODO: random.nextInt(13);        Lv += 27;//TODO:2;        name = search(); //"Flipkart"        if(name==null)        {            Toast.makeText(this,"Error fetching resource name",Toast.LENGTH_SHORT).show();            return;        }        if(newlocation!=null) {            editor = sharedPreferences.edit();            editor.putString("Lat", Double.toString(newlocation.getLatitude()));            editor.putString("Lon", Double.toString(newlocation.getLongitude()));            editor.apply();        }        int id = getResources().getIdentifier(new Utilities().formatname(name),"drawable",getPackageName());        if(id!=0) {            Intent intent = new Intent(MainActivity.this, CatchActivity.class);                intent.putExtra("Name", name);                intent.putExtra("Lv", Lv);                intent.putExtra("Zone", "Zone");                startActivity(intent);        }        else        {            Toast.makeText(this,"Error fetching drawable",Toast.LENGTH_SHORT).show();        }    }    private String search() {        List<String> pkmnarray = pokemonarray();        if(pkmnarray!=null) {            if(new Random().nextBoolean()) {                return pkmnarray.get(new Random().nextInt(pkmnarray.size()));            }            else            {                List<String> pk2 = Arrays.asList("Microsoft","Apple","Facebook","LinkedIn","SpaceX","Zomato");                return pk2.get(new Random().nextInt(pk2.size()));            }        }        else {            return null;        }    }    private List<String> pokemonarray() {        if (newlocation != null) {            double src[] = {newlocation.getLatitude(), newlocation.getLongitude()};            Locate locate = new Locate(src);            if(locate.getzone().equals("Error"))            {                Toast.makeText(this,"Startups will not appear outside IITM campus",Toast.LENGTH_SHORT).show();            }            //TODO:return locate.getpk();            List<String> pklist = locate.getpk();            return pklist;        } else {            return null;        }    }    private static void updatecash(Context c, int count)    {        SharedPreferences sharedPrefs = c.getSharedPreferences("PKDT", MODE_PRIVATE);        if(count>=24&&count<36)        {            int cbc = sharedPrefs.getInt("PBall", 0);            sharedPrefs.edit().putInt("PBall",cbc+5).apply();            Toast.makeText(c,"You have 5 more Cashballs now",Toast.LENGTH_SHORT).show();        }        else if(count>=36&&count<48)        {            int cbc = sharedPrefs.getInt("GBall", 0);            sharedPrefs.edit().putInt("GBall",cbc+5).apply();            Toast.makeText(c,"You have 5 more GreatCashballs now",Toast.LENGTH_SHORT).show();        }        else if(count>= 48&&count<60)        {            int cbc = sharedPrefs.getInt("UBall", 0);            sharedPrefs.edit().putInt("UBall",cbc+5).apply();            Toast.makeText(c,"You have 3 more UltraCashballs now",Toast.LENGTH_SHORT).show();        }        else if(count >= 60)        {            int cbc = sharedPrefs.getInt("MBall", 0);            sharedPrefs.edit().putInt("MBall",cbc+1).apply();            Toast.makeText(c,"You have 1 more MasterCashballs now",Toast.LENGTH_SHORT).show();        }        else        {            Toast.makeText(c,"Sorry, you did not achieve enough taps",Toast.LENGTH_SHORT).show();        }    }    private void showGPSDisabledAlertToUser(){        alertDialogBuilder = new AlertDialog.Builder(this);        alertDialogBuilder.setMessage("GPS is disabled in your device. Would you like to enable it?")                .setCancelable(false)                .setPositiveButton("Goto Settings Page To Enable GPS",                        new DialogInterface.OnClickListener(){                            public void onClick(DialogInterface dialog, int id){                                dialog.cancel();                                Intent callGPSSettingIntent = new Intent(                                        android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS);                                startActivity(callGPSSettingIntent);                            }                        });        alertDialogBuilder.setNegativeButton("Cancel",                new DialogInterface.OnClickListener(){                    public void onClick(DialogInterface dialog, int id){                        dialog.cancel();                    }                });        AlertDialog alert = alertDialogBuilder.create();        alert.show();    }    @Override    protected void onPause() {        super.onPause();        mediaPlayer.stop();    }    @Override    protected void onResume() {        super.onResume();    }}